name: Actions 😎

on:
  pull_request: {}
  push: { branches: [main] }
  
env:
  UNITY_LICENSE: "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root>	    <License id=\"Terms\">	        <MachineBindings>	            <Binding Key=\"1\" Value=\"576562626572264761624c65526f7578\"/>	            <Binding Key=\"2\" Value=\"576562626572264761624c65526f7578\"/>	        </MachineBindings>	        <MachineID Value=\"D7nTUnjNAmtsUMcnoyrqkgIbYdM=\"/>	        <SerialHash Value=\"9259dc4eedbe9c4f15077a176d2d3b453f89096b\"/>	        <Features>	            <Feature Value=\"33\"/>	            <Feature Value=\"1\"/>	            <Feature Value=\"12\"/>	            <Feature Value=\"2\"/>	            <Feature Value=\"24\"/>	            <Feature Value=\"3\"/>	            <Feature Value=\"36\"/>	            <Feature Value=\"17\"/>	            <Feature Value=\"19\"/>	            <Feature Value=\"62\"/>	        </Features>	        <DeveloperData Value=\"AQAAAEY0LVc4TVQtUE5HWS1WWlpRLVdWNUYtQzVZVA==\"/>	        <SerialMasked Value=\"F4-W8MT-PNGY-VZZQ-WV5F-XXXX\"/>	        <StartDate Value=\"2018-03-12T00:00:00\"/>	        <UpdateDate Value=\"2022-09-18T09:10:35\"/>	        <InitialActivationDate Value=\"2018-03-12T22:53:49\"/>	        <LicenseVersion Value=\"6.x\"/>	        <ClientProvidedVersion Value=\"2019.2.11f1\"/>	        <AlwaysOnline Value=\"false\"/>	        <Entitlements>	            <Entitlement Ns=\"unity_editor\" Tag=\"UnityPersonal\" Type=\"EDITOR\" ValidTo=\"9999-12-31T00:00:00\"/>	            <Entitlement Ns=\"unity_editor\" Tag=\"DarkSkin\" Type=\"EDITOR_FEATURE\" ValidTo=\"9999-12-31T00:00:00\"/>	        </Entitlements>	    </License>	<Signature xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><SignedInfo><CanonicalizationMethod Algorithm=\"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\"/><SignatureMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#rsa-sha1\"/><Reference URI=\"#Terms\"><Transforms><Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/></Transforms><DigestMethod Algorithm=\"http://www.w3.org/2000/09/xmldsig#sha1\"/><DigestValue>qQYCIMi+hurAXpcw0dQGrbLzJSE=</DigestValue></Reference></SignedInfo><SignatureValue>yPUArS5qt/Db5V7rTHzfeZwEXYIxvAdx9pp4wimt8cV5qEZlNmf1SehLLc01GG7RnOy83r2J9OM9YJEg7YWezGfyZx+RakcBbp+ESW1I8lp+npTGgVDsY/RNBHGZBaeB9xudVkBpYosO/qy6nJOJYdTcUHUBu413lMtRXVrNjEUFzjVZ03Uj1qbqDui/2j7QXWCW7GQcJ84FVArDbLyD3yXVgfofVTDNSaPcgxfCxbGwi1vpHAVm2StTKAmDDCjMPWyreQ+kWCDj4d4jLP99ZkoegbaubJ5U+Y/xUYMBy5ejseK3t36EF4DYicEfpSgrqdWrmp7XuQBTRbHbf9LAyw==</SignatureValue></Signature></root>"
  
jobs:
  readmeWorkflow:
    name: Readme Workflow ✨
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: test-projects/test-project/Library
          key: Library-test-project-WebGL

      # Test
      - name: Run tests
        uses: game-ci/unity-test-runner@v2
        with:
          projectPath: unity-project

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        with:
          projectPath: unity-project
          targetPlatform: WebGL

      # Output
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build

  #
  # End of readme workflow.
  #
  # Below is a test of most combinations, for testing integrity.
  #

  requestManualActivationFile:
    name: Request manual activation file 🔑
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - uses: actions/checkout@v2

      # Request manual activation file
      - uses: game-ci/unity-request-activation-file@v2
        id: getManualLicenseFile

      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - uses: actions/upload-artifact@v2
        with:
          name: Manual Activation File
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

#  requestActivation:
#    name: Request activation ✔
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: game-ci/unity-activate@v2
#
#  activateAndThenReturnLicense:
#    name: returnLicense 🎈
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: game-ci/unity-activate@v2
#      - uses: game-ci/unity-return-license@v2

  testRunnerInEditMode:
    name: Test in editmode 📝
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: test-projects/test-project/Library
          key: Library-test-project
          restore-keys: |
            Library-test-
      # Configure test runner
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          projectPath: unity-project
          testMode: editmode

      # Upload artifact
      - uses: actions/upload-artifact@v2
        with:
          name: Test results (edit mode)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  testRunnerInPlayMode:
    name: Test in playmode 📺
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: test-projects/test-project/Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-
      # Configure test runner
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          projectPath: unity-project
          testMode: playmode

      # Upload artifact
      - uses: actions/upload-artifact@v2
        with:
          name: Test results (play mode)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  testRunnerInAllModes:
    name: Test in ${{ matrix.testMode }} ✨
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      # Checkout repository (required to test local actions)
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: test-projects/test-project/Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-
      # Configure test runner
      - uses: game-ci/unity-test-runner@v2.0-alpha-5
        id: testRunner
        with:
          projectPath: unity-project
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts
      - uses: actions/upload-artifact@v2
        with:
          name: Test results (${{ matrix.testMode }})
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  #
  # Complete advanced workflow
  #

  buildAndTestForSomePlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - unity-project
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - iOS # Build an iOS player.
          - WebGL # WebGL.
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Restore Library cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-buildAndTest-${{ matrix.projectPath }}-buildAndTest-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-buildAndTest-
            Library-${{ matrix.projectPath }}-
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          projectPath: ${{ matrix.projectPath }}
      - uses: actions/upload-artifact@v2
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}
      - uses: game-ci/unity-builder@v2
        with:
          projectPath: ${{ matrix.projectPath }}
          targetPlatform: ${{ matrix.targetPlatform }}
          customParameters: "-myParameter myValue -myBoolean -ThirdParameter andItsValue"
      - uses: actions/upload-artifact@v2
        with:
          name: Build (${{ matrix.targetPlatform }})
          path: build/${{ matrix.targetPlatform }}
